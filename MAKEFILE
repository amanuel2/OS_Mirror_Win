GPPARAMS =  -m32 -g -Iinclude -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-rtti -fno-exceptions -fno-leading-underscore -Wno-write-strings -Wno-unused-label -ffreestanding -Wall -Werror
LDPARAMS =  
objects = stdlib.o stdio.o kernel.o isr.o irq.o idt.o mem.o string.o serial.o timer.o gdt.o port.o  gdt_flush.o port_a.o boot.o idt_a.o isr_a.o  irq_a.o	
i686 = i686-elf-

all: run_vb

compile:
	$(i686)g++ $(GPPARAMS) -o stdio.o -c stdio.c++ -ffreestanding 
	$(i686)g++ $(GPPARAMS) -o kernel.o -c kernel.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o gdt.o -c gdt.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o port.o -c port.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o serial.o -c serial.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o mem.o -c mem.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o string.o -c string.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o isr.o -c isr.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o idt.o -c idt.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o irq.o -c irq.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o stdlib.o -c stdlib.c++ -ffreestanding
	$(i686)g++ $(GPPARAMS) -o timer.o -c timer.c++ -ffreestanding
	$(i686)as $(ASPARAMS) -g -o boot.o boot.S
	$(i686)as $(ASPARAMS) -g -o isr_a.o isr.S
	$(i686)as $(ASPARAMS) -g -o port_a.o port.S
	$(i686)as $(ASPARAMS) -g -o idt_a.o idt.S
	$(i686)as $(ASPARAMS) -g -o irq_a.o irq.S
	$(i686)as $(ASPARAMS) -g -o gdt_flush.o gdt_flush.S
	
BoneOS.bin : linker.ld $(objects)
	i686-elf-ld $(LDPARAMS) -T linker.ld -o $@ $(objects)
	
install: BoneOS.bin
	copy $< /boot/BoneOS.bin

clean:
	  del $(objects)
	  del ISO
	  del BoneOS.*

qemu_compile: compile BoneOS.bin qemu
	

qemu:
	qemu-system-i386 -kernel BoneOS.bin

BoneOS.iso: BoneOS.bin 
	copy BoneOS.bin ISO/boot/BoneOS.bin
	Build 
	
run_vb: compile BoneOS.bin BoneOS.iso
	VirtualBox --startvm "BoneOS" &


